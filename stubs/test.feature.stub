<?php

declare(strict_types=1);

namespace Tests\Feature;

use App\Models\{{ class }};
use Tests\TestCase;

final class {{ test_feature_class }} extends TestCase
{
    public function test_can_create_{{ snake_name }}(): void
    {
        $data = {{ class }}::factory()->make()->toArray();

        $response = $this->post(route('{{ plural_kebab }}.store'), $data);

        $response->assertRedirect();
        $this->assertDatabaseHas('{{ table_name }}', $data);
    }

    public function test_can_view_{{ snake_name }}(): void
    {
        ${{ model_variable }} = {{ class }}::factory()->create();

        $response = $this->get(route('{{ plural_kebab }}.show', ${{ model_variable }}));

        $response->assertOk();
        $response->assertViewHas('{{ model_variable }}', ${{ model_variable }});
    }

    public function test_can_update_{{ snake_name }}(): void
    {
        ${{ model_variable }} = {{ class }}::factory()->create();
        $data = {{ class }}::factory()->make()->toArray();

        $response = $this->put(route('{{ plural_kebab }}.update', ${{ model_variable }}), $data);

        $response->assertRedirect();
        $this->assertDatabaseHas('{{ table_name }}', array_merge(['id' => ${{ model_variable }}->id], $data));
    }

    public function test_can_delete_{{ snake_name }}(): void
    {
        ${{ model_variable }} = {{ class }}::factory()->create();

        $response = $this->delete(route('{{ plural_kebab }}.destroy', ${{ model_variable }}));

        $response->assertRedirect();
        $this->assertDatabaseMissing('{{ table_name }}', ['id' => ${{ model_variable }}->id]);
    }
}
