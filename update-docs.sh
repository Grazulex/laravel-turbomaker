#!/bin/bash

# Script pour cr√©er une demande de mise √† jour de documentation et d'exemples
# Usage: ./update-docs.sh [type] [description]

set -e

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Fonction pour afficher un message color√©
print_message() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Fonction pour afficher l'aide
show_help() {
    print_message $BLUE "üìö Script de mise √† jour de documentation Laravel Arc"
    echo
    print_message $YELLOW "Usage:"
    echo "  $0 [type] [description]"
    echo
    print_message $YELLOW "Types disponibles:"
    echo "  docs      - Mise √† jour de la documentation"
    echo "  examples  - Mise √† jour des exemples"
    echo "  readme    - Mise √† jour du README"
    echo "  all       - Mise √† jour compl√®te (docs + exemples + README)"
    echo
    print_message $YELLOW "Exemples:"
    echo "  $0 docs \"Ajouter documentation pour les nouvelles m√©thodes d'export\""
    echo "  $0 examples \"Mettre √† jour les exemples avec les traits\""
    echo "  $0 readme \"Synchroniser le README avec les derni√®res fonctionnalit√©s\""
    echo "  $0 all \"Mise √† jour compl√®te apr√®s ajout des fonctionnalit√©s d'export\""
    echo
    print_message $PURPLE "üí° Le script cr√©era automatiquement un ticket GitHub"
}

# V√©rifier les arguments
if [ $# -eq 0 ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    show_help
    exit 0
fi

UPDATE_TYPE=$1
DESCRIPTION=${2:-""}

# Valider le type de mise √† jour
case $UPDATE_TYPE in
    docs|examples|readme|all)
        ;;
    *)
        print_message $RED "‚ùå Type de mise √† jour invalide: $UPDATE_TYPE"
        echo
        show_help
        exit 1
        ;;
esac

# V√©rifier que gh CLI est install√©
if ! command -v gh &> /dev/null; then
    print_message $RED "‚ùå GitHub CLI (gh) n'est pas install√©"
    print_message $YELLOW "üí° Installez-le avec: sudo apt install gh (Ubuntu) ou brew install gh (macOS)"
    exit 1
fi

# V√©rifier que l'utilisateur est connect√© √† GitHub
if ! gh auth status &> /dev/null; then
    print_message $RED "‚ùå Vous n'√™tes pas connect√© √† GitHub"
    print_message $YELLOW "üí° Connectez-vous avec: gh auth login"
    exit 1
fi

# Obtenir des informations sur le repository
REPO_INFO=$(gh repo view --json name,owner)
REPO_NAME=$(echo $REPO_INFO | jq -r '.name')
REPO_OWNER=$(echo $REPO_INFO | jq -r '.owner.login')

print_message $BLUE "üìù Cr√©ation d'une demande de mise √† jour pour $REPO_OWNER/$REPO_NAME..."

# Si aucune description n'est fournie, demander √† l'utilisateur
if [ -z "$DESCRIPTION" ]; then
    print_message $YELLOW "üí≠ Veuillez fournir une description pour la mise √† jour:"
    read -r DESCRIPTION
    
    if [ -z "$DESCRIPTION" ]; then
        print_message $RED "‚ùå Description requise"
        exit 1
    fi
fi

# D√©finir le titre et le contenu selon le type
case $UPDATE_TYPE in
    docs)
        TITLE="üìö Mise √† jour de la documentation"
        LABELS="scope:docs"
        ;;
    examples)
        TITLE="üí° Mise √† jour des exemples"
        LABELS="scope:docs"
        ;;
    readme)
        TITLE="üìñ Mise √† jour du README"
        LABELS="scope:docs"
        ;;
    all)
        TITLE="üîÑ Mise √† jour compl√®te documentation et exemples"
        LABELS="scope:docs"
        ;;
esac

# Cr√©er le contenu de l'issue
ISSUE_BODY="## üéØ Objectif

$DESCRIPTION

## üìã T√¢ches √† effectuer

"

case $UPDATE_TYPE in
    docs)
        ISSUE_BODY+="- [ ] Relire le code source pour identifier les nouvelles fonctionnalit√©s
- [ ] Mettre √† jour la documentation dans \`docs/\`
- [ ] V√©rifier que tous les fichiers de documentation sont coh√©rents
- [ ] Ajouter des exemples dans la documentation si n√©cessaire"
        ;;
    examples)
        ISSUE_BODY+="- [ ] Relire le code source pour identifier les nouvelles fonctionnalit√©s
- [ ] Mettre √† jour les exemples dans \`examples/\`
- [ ] Cr√©er de nouveaux exemples si n√©cessaire
- [ ] V√©rifier que tous les exemples fonctionnent correctement
- [ ] Mettre √† jour le README des exemples"
        ;;
    readme)
        ISSUE_BODY+="- [ ] Relire le code source pour identifier les nouvelles fonctionnalit√©s
- [ ] Mettre √† jour le README principal
- [ ] Synchroniser les badges et liens
- [ ] Mettre √† jour les exemples d'utilisation dans le README
- [ ] V√©rifier la coh√©rence avec la documentation"
        ;;
    all)
        ISSUE_BODY+="- [ ] Relire le code source pour identifier les nouvelles fonctionnalit√©s
- [ ] Mettre √† jour la documentation dans \`docs/\`
- [ ] Mettre √† jour les exemples dans \`examples/\`
- [ ] Mettre √† jour le README principal
- [ ] Cr√©er de nouveaux exemples si n√©cessaire
- [ ] V√©rifier la coh√©rence entre documentation, exemples et README
- [ ] Tester tous les exemples"
        ;;
esac

ISSUE_BODY+="

## üîç Contexte technique

Veuillez examiner les fichiers suivants pour comprendre les changements r√©cents :
- \`src/\` - Code source principal
- \`tests/\` - Tests (pour comprendre l'utilisation)
- \`composer.json\` - D√©pendances et configuration

## üìÅ Fichiers √† mettre √† jour

"

case $UPDATE_TYPE in
    docs)
        ISSUE_BODY+="- \`docs/\` - Tous les fichiers de documentation
- \`docs/README.md\` - Index de la documentation"
        ;;
    examples)
        ISSUE_BODY+="- \`examples/\` - Tous les fichiers d'exemples
- \`examples/README.md\` - Documentation des exemples"
        ;;
    readme)
        ISSUE_BODY+="- \`README.md\` - Documentation principale du projet"
        ;;
    all)
        ISSUE_BODY+="- \`README.md\` - Documentation principale
- \`docs/\` - Toute la documentation
- \`examples/\` - Tous les exemples
- \`examples/README.md\` - Documentation des exemples"
        ;;
esac

ISSUE_BODY+="

## ‚úÖ Crit√®res d'acceptation

- [ ] La documentation refl√®te fid√®lement le code actuel
- [ ] Les exemples sont fonctionnels et √† jour
- [ ] Le style et la coh√©rence sont respect√©s
- [ ] Aucun lien bris√© ou r√©f√©rence obsol√®te

---

**ü§ñ Cette issue a √©t√© cr√©√©e automatiquement via le script \`update-docs.sh\`**"

# Cr√©er l'issue GitHub
print_message $BLUE "üé´ Cr√©ation de l'issue GitHub..."

ISSUE_URL=$(gh issue create \
    --title "$TITLE" \
    --body "$ISSUE_BODY" \
    --label "$LABELS" \
    --assignee "@me")

if [ $? -eq 0 ]; then
    print_message $GREEN "‚úÖ Issue cr√©√©e avec succ√®s !"
    print_message $BLUE "üîó URL: $ISSUE_URL"
    print_message $GREEN "üë• Assign√©e automatiquement √† vous"
    
    # Extraire le num√©ro de l'issue de l'URL
    ISSUE_NUMBER=$(echo $ISSUE_URL | grep -o '[0-9]*$')
    
    # Proposer d'ouvrir l'issue dans le navigateur
    echo -e "${BLUE}üåê Voulez-vous ouvrir l'issue dans le navigateur ? ${NC}(y/N)"
    read -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        gh issue view $ISSUE_NUMBER --web
    fi
    
else
    print_message $RED "‚ùå Erreur lors de la cr√©ation de l'issue"
    exit 1
fi

print_message $GREEN "üéâ Demande de mise √† jour cr√©√©e avec succ√®s !"
print_message $PURPLE "üí≠ N'oubliez pas de mentionner les changements sp√©cifiques dans l'issue si n√©cessaire"
